#user  nobody; # 设置可以使用的用户，user nobody表示所有用户可以运行
worker_processes  1; # 并发处理的能力，通常设置为与CPU相等或者两倍

#error_log [position] [debug|info|notice|warn|error|crit|alert] 对nginx服务器日志进行相关配置

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid; # 保存当前运行程序的主进程号 


# 配置工作模式和连接数
events {
    worker_connections  1024;  #表示每一个worker process最大连接数，如果过少当用户量过载时可能会出现禁止访问的现象.
}

# http模块相关配置
http {
    # include file # 配置文件的引入,该指令可以放在配置文件的任意位置
    # 此处的mime.types文件定义了多个资源类型,
    include       mime.types;
    default_type  application/octet-stream; #默认文件类型

    # 此处记录nginx服务器提供应答前端请求的日志，需要使用两个指令分别是access_log和log_format
    # log_format name string ..;
    # access_log path[format[buffer=size]]
    # 其中path是日志存放路径， format是日志格式，
    # buffer指临时存放日志文件缓冲区的大小
    # format通常是一个名字，是log_format定义的名字。
    
    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';
     
    #access_log  logs/access.log  main;

    sendfile        on; # 允许sendfile方式传输文件
    # sendfile_max_chunk 100k #每个进程每次调用传输数量不能大于设定值，默认0不设置上限
    # proxy_read_timeout 1; #nginx服务器想被代理服务器组发出read请求后，等待响应的超时间，默认为60秒。
    # proxy_send_timeout 1; #nginx服务器想被代理服务器组发出write请求后，等待响应的超时间，默认为60秒。
    # proxy_ignore_client_abort on;  #客户端断网时，nginx服务器是否终端对被代理服务器的请求。默认为off。
    # proxy_ignore_headers "Expires" "Set-Cookie";  #Nginx服务器不处理设置的http相应投中的头域，这里空格隔开可以设置多个
    # proxy_headers_hash_max_size 1024; #存放http报文头的哈希表容量上限，默认为512个字符。
    # proxy_headers_hash_bucket_size 128; #nginx服务器申请存放http报文头的哈希表容量大小。默认为64个字符。
    # proxy_next_upstream timeout|error|invalid_header|http_500,502,503... 反向代理upstream中设置的服务器组，出现故障时，被代理服务器返回的状态值
    # proxy_ssl_session_reuse on; 默认为on，如果我们在错误日志中发现“SSL3_GET_FINSHED:digest check failed”的情况时，可以将该指令设置为off。
    # tcp_nopush     on;

    # 与用户建立会话连接后，Nginx服务器可以保持这些连接打开一段时间,设置response头的keep-alive时间.
    #keepalive_timeout  0;
    keepalive_timeout  65;

    # gzip压缩指令，开启Gzip压缩功能
    # 可以使网站的css,js,xml,html文件在传输时进行压缩，提高访问速度, 进而优化Nginx性能!。
    #gzip  on;

    # 负载均衡的应用
#   upstream mysvr {  # 基本轮询
#      server 192.168.10.121:3333;
#      server 192.168.10.122:3333;
#   } 
#   upstream mysvr {  # 备份
#      server 192.168.10.121:3333;
#      server 192.168.10.122:3333 backup; #热备份，第一台服务器出现错误才提供服务
#   } 
#   upstream mysvr {  # 加权
#      server 192.168.10.121:3333 weight=1;
#      server 192.168.10.122:3333 weight=2; 
#   } 
#   upstream mysvr {  # ip哈希
#      server 192.168.10.121:3333;
#      server 192.168.10.122:3333;
#      ip_hash;
#   } 
#   max_fails :允许请求失败的次数，默认为1.超过最大次数时返回proxy_next_upstream模块定义的错误
#   fail_timeout:经历max_fails次失败后，暂停服务的时间
#   down:表示当前server不参与负载均衡.
#   backup:预留备份机器，前面已经提及.
#   upstream mysvr {  
#      server 192.168.10.121:3333 max_fails=2 fail_timeout=2;
#      server 192.168.10.122:3333;
#      ip_hash;
#   } 
    #虚拟主机配置，可以有多个   
    server {
        listen       80; # 监听端口中所有的IP连接
        # listen 192.168.1.10:8000 # 监听具体IP和具体端口

        # 此处ip地址可以配置多个，其中的匹配原则为精准>左侧通配>右侧通配>正则
        # 例子如下:
        # server_name  www.baidu.com; 精准
        # server_name  *.baidu.com; 左侧
        # server_name  www.baidu.*; 右侧
        # server_name  ~^www\.baidu\.*$; 正则
        # 其中的匹配规则为
        # =      精确匹配	location = /images/ {...}
        # ~	     正则匹配,区分大小写	location ~ .(jpg
        # ~*	 正则匹配,不区分大小写	location ~* .(jpg
        # ^~	 匹配到即停止搜索	location ^~ /images/ {...}
        # 不带任何符号		location / {...}
         server_name  localhost; # 服务器的IP地址
        

        #charset koi8-r;

        #access_log  logs/host.access.log  main;
        # 处理端口的location,用来匹配客户端请求的url,匹配后前往目录寻找文件
        location / {
            # 指定静态资源的根目录
            root   html;
            # 指定默认访问的首页
            index  index.html index.htm;
        }

        # 设置404页面导向地址
        # error_page  404  /404.html; # 错误页
        # proxy_intercept_errors on;  # 如果代理服务器返回的状态码为400或大于400,error_page起作用,默认为off
        # proxy_method get/post; # 如果需要设置只允许接收get或者post方法中的一种.
        # proxy_http_version 1.0 # 设置支持http协议代理的版本.

        # 根据报错码到指定的页面中
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}